package ${packageName}.service.impl;

import java.util.Arrays;
import java.util.List;
#foreach ($column in $columns)
#if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import java.time.LocalDateTime;
import com.ruoyi.common.security.utils.SecurityUtils;
#break
#end
#end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import org.apache.commons.lang3.StringUtils;
#if($table.sub)
import java.util.ArrayList;
import cn.hutool.core.collection.CollectionUtil;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.domain.${subClassName};
import ${packageName}.service.I${subClassName}Service;
#end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;

/**
 * ${functionName}Service业务层处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements I${ClassName}Service
{
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;
#if($table.sub)
    @Autowired
    private I${subClassName}Service ${subclassName}Service;
#end
    /**
     * 查询${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    @Override
    public ${ClassName} select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField})
    {
        ${ClassName} ${className} = this.getBaseMapper().selectById(${pkColumn.javaField});
    #if($table.sub)
        List<${subClassName}> ${subClassName}List = ${subclassName}Service.getBaseMapper().selectList(Wrappers.<${subClassName}>lambdaQuery().eq(${subClassName}::get${subTableFkClassName}, ${pkColumn.javaField}));
        ${className}.set${subClassName}List(CollectionUtil.isEmpty(${subClassName}List) ? new ArrayList<>() : ${subClassName}List);
    #end
        return ${className};
    }

    /**
     * 查询${functionName}列表
     * 
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className}) {
        LambdaQueryWrapper<${ClassName}> lqw = Wrappers.lambdaQuery();
        #foreach($column in $columns)
        #set($queryType=$column.queryType)
        #set($javaField=$column.javaField)
        #set($javaType=$column.javaType)
        #set($columnName=$column.columnName)
        #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        #if($column.query)
        #if($column.queryType == "EQ")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            lqw.eq(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            lqw.eq(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #end
        #elseif($queryType == "NE")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            lqw.ne(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            lqw.ne(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #end
        #elseif($queryType == "GT")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            lqw.gt(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            lqw.gt(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #end
        #elseif($queryType == "GTE")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            lqw.ge(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            lqw.ge(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #end
        #elseif($queryType == "LT")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            lqw.lt(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            lqw.lt(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #end
        #elseif($queryType == "LTE")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            lqw.le(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            lqw.le(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #end
        #elseif($queryType == "LIKE")
        #if($javaType == 'String')
            if (StringUtils.isNotBlank(${className}.get$AttrName())){
            lqw.like(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #else
            if (${className}.get$AttrName() != null){
            lqw.like(${ClassName}::get$AttrName ,${className}.get$AttrName());
        }
        #end
        #elseif($queryType == "BETWEEN")
        Map<String, Object> params = ${className}.getParams();
        if (params.get("begin$AttrName") != null && params.get("end$AttrName") != null) {
            lqw.between(${ClassName}::get$AttrName ,params.get("begin$AttrName"),params.get("end$AttrName"));
        }
    #end
    #end
    #end
        return this.list(lqw);
    }

    /**
     * 新增${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int insert${ClassName}(${ClassName} ${className})
    {
#foreach ($column in $columns)
#if($column.javaField == 'createTime')
        ${className}.setCreateBy(SecurityUtils.getUserId().toString());
        ${className}.setCreateTime(LocalDateTime.now());
#end
#end
#if($table.sub)
        int rows = this.getBaseMapper().insert(${className});
        insert${subClassName}(${className});
        return rows;
#else
        return this.getBaseMapper().insert(${className});
#end
    }

    /**
     * 修改${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int update${ClassName}(${ClassName} ${className})
    {
#foreach ($column in $columns)
#if($column.javaField == 'updateTime')
        ${className}.setUpdateBy(SecurityUtils.getUserId().toString());
        ${className}.setUpdateTime(LocalDateTime.now());
#end
#end
#if($table.sub)
        // 删除子表数据
        ${subclassName}Service.getBaseMapper().delete(Wrappers.<${subClassName}>lambdaQuery().eq(${subClassName}::get${subTableFkClassName}, ${className}.getId()));
        // 新增子表数据
        insert${subClassName}(${className});
#end
        return this.getBaseMapper().updateById(${className});
    }

    /**
     * 批量删除${functionName}
     * 
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}s(List[${pkColumn.javaType}] ${pkColumn.javaField}s)
    {
#if($table.sub)
        // 删除子表数据
        ${subclassName}Service.getBaseMapper().delete(Wrappers.<${subClassName}>lambdaQuery().in(${subClassName}::get${subTableFkClassName}, ${pkColumn.javaField}s));
#end
        return this.getBaseMapper().deleteBatchIds(${pkColumn.javaField}s);
    }

    /**
     * 删除${functionName}信息
     * 
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField})
    {
#if($table.sub)
        // 删除子表数据
        ${subclassName}Service.getBaseMapper().delete(Wrappers.<${subClassName}>lambdaQuery().eq(${subClassName}::get${subTableFkClassName}, ${pkColumn.javaField}));
#end
        return this.getBaseMapper().deleteById(${pkColumn.javaField});
    }
#if($table.sub)

    /**
     * 新增${subTable.functionName}信息
     * 
     * @param ${className} ${functionName}对象
     */
    public void insert${subClassName}(${ClassName} ${className})
    {
        List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
        ${pkColumn.javaType} ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();
        if (CollectionUtil.isNotEmpty(${subclassName}List))
        {
            List<${subClassName}> list = new ArrayList<${subClassName}>();
            for (${subClassName} ${subclassName} : ${subclassName}List)
            {
                // 子表中设置父表id
                ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});
                list.add(${subclassName});
            }
            if (list.size() > 0)
            {
                ${subclassName}Service.saveBatch(list);
            }
        }
    }
#end
}
